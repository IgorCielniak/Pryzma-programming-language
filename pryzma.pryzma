variables = {}
functions = {}

/eval{
    handeled=False
    value = strip(args[0])
    check = startswith(""",value)
    check2 = startswith(""",value)

    if(check == True){if(check2 == True){result = value[1:-1]|handeled=True|return result}}
    if(handeled == False){is_num = isanumber(value)|if(is_num == True){result = int(value)|handeled=True|return result}}
    if(handeled == False){check = in(value,char(93))|if(check==True){value = splitby(char(91),value[:-1])|var_name = value[0]|index = value[1]|index = @eval(index)|handeled = True|return variables[var_name][index]}}
    if(handeled == False){value = pyeval(value,variables)|handeled = True|return value}
    if(handeled == False){check = in(variables,value)|if(check==True){result = variables[value]|handeled = True|return result}}
    if(handeled == False){return None}
}


/interpret{
    line = args[0]

    check_if = startswith("if",line)

    if(check_if == True){
        h6 = char(41)+char(123)
        line2 = splitby(h6,line)
        line2[0] = line2[0][3:]
        line2[1] = line2[1][:-1]
        check2 = pyeval(line2[0],variables)
        if(check2==True){
            actions = splitby(char(124),line2[1])
            for(action,0:len(actions)){
                @interpret(actions[action])
            }
        }
    }

    line = args[0]

    if(check_if != True){

        check = in(line,"=")

        if(check==True){
            expr = splitby("=",line)
            var = strip(expr[0])
            value = strip(expr[1])
            result = @eval(value)
            push(variables,var,result)
        }
    }

    check = startswith("print",line)

    if(check == True){
        line = line[5:]
        result = @eval(line)
        print result
    }
    
    check = startswith("/",line)

    if(check == True){
        line2 = splitby(char(123),line[:-1])
        func_name = line2[0][1:]
        func_body = splitby(char(124),line2[1])
        push(functions,func_name,func_body)
    }


    check = startswith("@",line)
    if(check == True){
        func_name = line[1:]
        check = in(func_name,char(40))
        if(check==True){
            func = func_name[:-1]
            h4 = char(40)
            func = splitby(h4,func)
            func_name = func[0]
            h5 = char(44)
            args = func[1]
            args = splitby(h5,args)
            for(arg,0:len(args)){
                args[arg] = @eval(args[arg])
            }
            push(variables,"args",args)
        }
        actions = functions[func_name]
        actions_count = len(actions)
        for(i,0:actions_count){
            action = strip(functions[func_name][i])
            if(action!=""){
                @interpret(action)
            }
        }
    }
}

program = read(pargs[1])
program = replace(program,"\n",";")
prog = list(program)

h = char(123)
h2 = char(125)
h3 = char(59)
in_func = 0

for(char,0:len(prog)){
    if (prog[char]==h){
        in_func += 1
    }
    if (prog[char]==h2){
        in_func -= 1
    }
    if (in_func == 1 and prog[char] == h3){
        prog[char] = char(124)
    }
}

program = all(prog)

lines = splitby(";",program)

for(line_count,0:len(lines)-1){
    line = strip(lines[line_count])
    if(line!=""){
        @interpret(line)
    }
}


