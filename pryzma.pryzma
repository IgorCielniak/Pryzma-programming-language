variables = {}
functions = {}

/eval{
    handeled=False
    value = strip(args[0])
    check = startswith(""",value)
    check2 = startswith(""",value)

    if(check == True){if(check2 == True){result = value[1:-1]|handeled=True|return result}}
    if(handeled == False){is_num = isanumber(value)|if(is_num == True){result = value|handeled=True|return result}}
    if(handeled == False){result = variables[value]|handeled = True|return result}
    if(handeled == False){return None}
}

/interpret{
    line = args[0]
    check = startswith("print",line)
    if(check == True){
        line = line[5:]
        result = @eval(line)
        print result
    }

    check = in(line,"=")

    if(check==True){
        expr = splitby("=",line)
        var = strip(expr[0])
        value = strip(expr[1])
        result = @eval(value)
        push(variables,var,result)
    }


    check = startswith("/",line)

    if(check == True){
        line2 = splitby(char(123),line[:-1])
        func_name = line2[0][1:]
        func_body = splitby(char(124),line2[1])
        push(functions,func_name,func_body)
    }

    check = startswith("@",line)
    if(check == True){
        func_name = line[1:]
        actions = functions[func_name]
        actions_count = len(actions)
        for(i,0:actions_count){
            action = strip(functions[func_name][i])
            @interpret(action)
        }
    }

}
program = read(pargs[1])
program = replace(program,"\n",";")
prog = list(program)

h = char(123)
h2 = char(125)
h3 = char(59)
in_func = False

for(char,0:len(prog)){
    if (prog[char]==h){
        in_func = True
    }
    if (prog[char]==h2){
        in_func = False
    }
    if (in_func == True and prog[char] == h3){
        prog[char] = char(124)
    }
}

program = all(prog)

lines = splitby(";",program)
for(line_count,0:len(lines)-1){
    line = strip(lines[line_count])
    if(line!=""){
        @interpret(line)
    }
}
