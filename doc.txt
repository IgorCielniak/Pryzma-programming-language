Pryzma programming language official documentation

Pryzma is a simple interpreted programing language written in python

if you wish you can put semicolons at the end of a line but you don't need to

Variables:

in pryzma you have strings, intigers, floats, booleans, lists, dictionaries and tuples:

a = "a"

value = 1
value2 = 1.1

condition = True
condition2 = False

my_list = []
my_dict = {}
my_tuple = ()

you can define staticly typed strings and integers:

int x

default value 0

int x = 6
int x = "7"

"7" will be converted to an integer

str a

default value ""

str a = "a"

str value = 7

7 will be converted to a string

List operations:

list = [1,2,3]

print list[0] outputs 1 etc.

append a, "text"

it will append a string "text" to list a, you can also do copy that append elements from one list to another:

a = [1,2]

b = [3,4]

copy b,a

print a

output will be [1,2,3,4]

a = ["text", "text2"]

pop a, "text"

print a

it will pop text from list a and output ["text2"]

you can remove from a list like this:

a = [1,2,3,4,5]

remove a,5

print a

output will be:
[1,2,3,4]

you can move objects on a list by using the move instruction like that:

a = [1,2,3,4,5]

move(0, 1, a)

print a

output will be [2, 1, 3, 4, 5] becouse it moves the object with the index 0 to index 1

you can also swap wariables like that:

a = [1,2,3,4,5]

swap(0, 2, a)

print a

output will be [3, 2, 1, 4, 5]

in dictionaries you can do:

push(dict_name,key,value)

to push a value in to a dictionary

a = get(dict_name,key)

to retrive a value from a dictionary

dpop(dict_name,key)

to pop a value from a dictionary

Type conversion:

variable = int(variable)

or

variable = str(1)

or

a = ("a", "b")

variable = list(a)

etc.

to get type of some variable you can do:

a = 1
b = type(a)
print b

it will print int

you can also check if a variable is a number like this:

a = 1

b = isanumber(a)

print b

output will be True


Len:
you also can do len like that:

a = "text"

print len(a)

it will print 4 ,you can also do:

a = [1,2,3,4,5]

print len(a)

it will print 5

index:

a = [1,2,3,4,5]
b = index(a, 3)
print b

output will be 2
index() returns index of value in some list or error if isn't in the list


Split:

a = "text"

print split(a)

it will print:

["t", "e", "x", "t"]


splitlines() works nearly the same but it split by lines not by words, there is also splitby(),
that split by some character for example if i have string "textMtext" and i want to split it by the M i can do it like that:

a = "textMtext"
b = splitby("M", a)
print b

output will be a list that will look like that:

["text", "text"]

if you want to split by "," because its not working you will need to do some think like that:

a = "text,text"
f = ","
b = splitby(f, a)
print(b)

Output will be:

['text', 'text']

as the third argument you can pass how many times you want to split like in python

there is also resplit() that allows for spliting with a regex:

e = "123abc456def"
f = resplit("\d+", e)
print f

Output:

["", "abc", "def"]

Replace:

a = "ddd"

a = replace(a,"d","f")

print a

output will be "fff" I think it is self explanatory

Arithmetic Operations:

Pryzma supports basic arithmetic operations including addition, subtraction, multiplication, and division.

result = 10 + 5
total = 2 * 3
difference = 8 - 4
quotient = 10 / 2

Input/Output:

Pryzma allows input from the user and output to the console. Concatenation is used to combine strings and variables for output.

input age::"age:"
print "Your age is: ", age

in input age is a variable that input will be assigned to it and "age:" is the prompt, if input will look like that:

input age

then no prompt will be displayed

if there is \n in line it will print new line like in C, you can also do string slicing like that:

a = "text"

print a[1:-1]

it will print ex because it will remove one character form right and one from left

Flow Control:

Pryzma supports simple flow control using the stop statement. It terminates the program execution.

stop

Loops:

for(i, 1:4){
    print i
    print "\n"
    print "hello"
    print "\n"
}


output will be:

1
hello
2
hello
3
hello

there is also foreach to iterate lists:

a = ["h","e","l","l","o"]

foreach(element,a){print element}

you can use break statements

While:

while(a==b){print i}

while value of a equals value of b value of i will be printed
it supports the same operators as if and break statements

incrementing by one:

i = 0
i++
print i
output will be 1 , ++ increments by one you can also do ++i

decrementing by one:

i = 1
i--
print i
output will be 0 , -- decrements by one you can also do --i

normal incrementing:
you can use += like this

x=5
x+=5
print x

it will print 10

normal decrenenting:

x = 10
x-=5
print x

output:
5

Tkinter for Pryzma:

to enable the use of tkinter from the code you can do some think like that:

tk enable

now you can use basic tkinter functions in Pryzma, for example:

tk window(name_of_the_window)

this creates a window with the given name

tk create_label(name_of_the_label, name_of_the_window, text_to_display)

this creates a label with the given name, parent window, and text to display

tk create_button(name_of_the_button, name_of_the_window, text_to_display, command_to_execute)

this creates a button with the given name, parent window, text to display, and command to execute when clicked

tk get_entry_text(entry_name, variable_name)

this gets the text from the entry with the given name and assigns it th the variable given

tk title(name_of_the_window, text_to_display_as_the_title)

this sets the title of the window to the given text

tk set_entry_text(entry_name, text_to_display)

this sets the text of the entry with the given name to the given text

importing:

use file_path

after import you can use functions from the imported file

if you add ./ before the file path it will look for the given file in the same folder as the file,
and if you just give the module name it will look for it in the packages folder that is created while installing packages with ppm.
you can also import files over http and https like this:

use https://raw.githubusercontent.com/IgorCielniak/Pryzma-packages/main/net/net.pryzma

in imported files if thres is a funcrion "on_import" it will be called instantly when importing the wile

Comments:

Comments in Pryzma start with the # symbol and continue to the end of the line.

#This is a comment

you also can do in line comments:

print "Hello, World" #This prints Hello, world


If statement:

input variable::"var1:"
input variable2::"var2:"
if(variable==variable2){print "true"|print "text"}else{print "no"}

or

if(variable==variable2){
print "true"
print "text"
}else{
print "no"
}

you can use operators like: ==, !=, <=, >=, < and >

Functions:

declare function:

/function_name{command|command2|command3}
or
/func_name{
command;
command;
}

you separate the instruction using the pipe symbol | or ; in multiline functions

calling functions:

@function_name("text")

a list called args will be created and contain all arguments in this case it would
contain the string "text", variables also can be used as arguments like that:



/add{print args[0]}

a = "text"

@add(a)

to call a function without argument you can do

@add

a function can return a value using the return keyword:

/func{return "hello"}

a = @func

print a

output:

hello

Loops:

for i, 1:5, print i

it will print numbers from one to five

a=3

for i, a:5, print i

it will print numbers from 3 to 5


while a, b, @func

as long as variable a will equal variable b it will call function func you can use string instead of a variable
there is also whilen that works the same but checks if the variables aren't equal

Exec function:

exec "os command"

can be used like that:

exec "echo Hello"

or:

command = "echo world"

exec command

Read and write:

content = read("C:\Users\User\Desktop\Untitled-1.txt")

content of file C:\Users\User\Desktop\Untitled-1.txt will be assigned to variable content

write("C:\Users\User\Desktop\Untitled-1.txt",mode,content)

iw will write value of variable content to file C:\Users\User\Desktop\Untitled-1.txt in mode stored as a value of vatiable mode

In:

a = [1,2,3]

b = in(a, 2)

print b

output will be True, you can also check if some string appear in list or if some word appear in string

Del:

you can use delvar to delete a variable like that:

a = "text"

print a

delvar("a")

print a

it will print text and then it will give error that will say that variable a doesn't exist
as the argument for the delvar() function you cann pass strings with the name of the function or a variable so you can do this:

a = "text"
b = "a"

print a

delvar(b)

print a

the output will be the same as in the earlier example

you can also delfunc to to delete a function in the same way or
delkeyword() to delete a key word (yes this actually works)

eval:

there is a function called eval that as the name suggests evaluates pryzma code:

eval("a = 10"|"print a")

and it will output 10

instead if a string you can also pass a variable

Cli arguments:
by running:

python Pryzma.py file_path d df

a list called pargs will be accesable from code and in this example it will contain two variables 'd' and 'df'
as well as a '__file__' variable that holds the full path to the current running file and a 'interpreter_path' variable that holds
the path to the interpreter
you can pass as many arguments as you wish

Calling python functions from Pryzma:

call(file_path,func_name, args)

for example:

call("C:\Users\User\Desktop\test2.py", "func2", "hello from python")

and file "C:\Users\User\Desktop\test2.py" content being:

def func2(self, arg):
        print(arg)

it will print "hello from python"
self is passed as well so you can acces the variables and basicly all of the interpreters thinks so you can define variables etc.
it needs to accept self even if you don't need it

Time:

you can do some time operations like that:

start_time = timenow
# ... some code or processing ...
end_time = timenow
time = end_time - start_time
print time

and it will print how much time it took to execute the code, timenow returns the current time.
if you want the program to wait you can do

wait(5)

the "5" in this example is time in seconds that you want to wait

Dir:

print dir("C:\Users\User\Desktop\Untitled-1.txt")

output:

C:\Users\User\Desktop\

as the argument you can also pass a variable

Extending the interpreters functionality:

you can define csutom keywords by making and loading a pyyhon extesnion for the interpreter, example extension:

def start(line):
    if line.startswith("customfunc"):
        text = line[10:].strip()
        print(text)
        return True  # Indicate that the line was handled
    return False  # Indicate that the line was not handled

this function takes the line and checks if it starts with customfunc and if it does it print the rest of the line
excluding the "customfunc"

to use the custom keywords from the pryzma code you need to load the module like this:

load("/home/user/Desktop/new.py")
customfunc hello

this code will load the module and print "hello"
the arg for the load() function can also be a variable
the funcion in the python module code needs to be named "start"

Try:

Pryzma has a VERY basic try that tries to execute a piece of code and if it fails returns the error code
how it looks:

try{print a|a = 10}

or:

try{
    print a
    a = 10
}

a variable err will be created and hold a value of 40 after executing this code
becouse the print instruction tries to acces variable a that is created later so it fails with status code 40
the err variable is reset to zero only after a next try block is succesfully executed or when changed manually

startswith and endswith:

a = "Pryzma"

b = startswith("P", a)

print b

output:

True

-----------------------------------

a = "Pryzma"

b = startswith("somethink", a)

print b

output:

False

randint:

a = randint(1,100)

print a

prints a random number in range 1 to 100

strip:

a = "     h       "

b = strip(a)

print b

output:

h

char():

char() is used to convert an ascii value to a chatacter for example:

print char(123)

output:

{

join:

a = ["h","e","l","l","o"]

b = join("",a)

print b

output:

hello

pyeval:

result = pyeval("1==1",stack)

print result

output:

True

the stack is an optional argument so you can pass your won stack

inline python:

a = "world"

py{
    "print("hello")"
    "print(a)"
}

output:

hello
world


defined():

a = defined(b)

if b is defined a will be True and if b is not defined a will be False

preprocessor flags from code:

preproc = np,fd

fd - forward declare runctions
np - don't preprocess

the preprocessor directives must be in the first line
otherwise they will be ignored

inline asm:

a = 10
b = 20
c = 0

asm{
    "mov rax, a"
    "add rax, b"
    "mov c, rax"
}

print c

output will be:

30

for now it only supports integers

Running Programs:

To run a Pryzma program, save the code in a text file execute it by lunching the
Pryzma interpreter and writing "file" command and providing a file path, or by lunching it from command line and  providing a file path sorunded  with " like that:

python Pryzma.py "file_path"

License:

Pryzma is open-source software released under the Apache license. See the license.txt file for more details.

Author:

Pryzma was created by Igor Cielniak.

Support:

For questions, bug reports, and feature requests, please contact me throu me email igorcielniak.contact@gmail.com or via github.

